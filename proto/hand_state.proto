syntax = "proto3";

import "card.proto";

package jam;

message HandState {
    // The id of the player viewing the hand state. If set, hides cards the
    // player can't see. If not set (ie, on the server) all cards will be shown.
    // Optional.
    string player_view_id = 1;

    // The street of the hand.
    enum Street {
        PRE_FLOP = 0;
        FLOP = 1;
        TURN = 2;
        RIVER = 3;
    }

    // The street the hand is currently on.
    Street street = 2;

    // The state of the player in the hand.
    message PlayerState {
        // The player's id. Required.
        string id = 1;

        // The amount the player has bet. Required.
        // The total stack size is stored within the game.
        int64 bet_size = 2;

        // The amount the player has put in the pot this hand.
        // The user would lose this amount if they won, or gain
        // pot.size - this amount if they won.
        int64 amount_in_pot = 3;

        // The index in the seating arrangement. 0 = dealer. Required.
        int32 seat_index = 4;

        // True if this player is in the hand, false otherwise. Required.
        bool active = 5;

        // Two cards in the player's hand. Censored on the client to `hidden`
        // if id != view_id; Uncensored on the server.
        CardViewList cards = 6;
    }

    message Pot {
        // The current bet. Players must bet at least this amount to call.
        int64 current_bet = 1;

        // How much is in the pot.
        int64 size = 2;

        // TODO: Side pots.
    }

    message Board {
        // The betting pot.
        Pot pot = 1;

        // The cards revealed so far.
        CardViewList cards = 2;
    }
    Board board = 3;

    // The player ids of the dealer, small blind, and big blind. Small blind
    // typically follows dealer in play, and big blind typically follows small
    // blind in play -- but when there are two players, the dealer is also the
    // small blind.
    string dealer_id = 4;
    string small_blind_id = 5;
    string big_blind_id = 6;

    // The player whose action it is.
    string action_player_id = 7;

    // The states of the players in the hand. One per player, even if the
    // player is not active.
    // Required.
    repeated PlayerState player_states = 8;

    message HandResult {
        // The cards played that won it all.
        Hand winning_hand = 1;

        // Who was the lucky BBQ.
        string winning_playerid = 2;

        // Not stored: The unlucky BBQs that have to be mentally tough.
    }

    // Populated with the results of winning, if applicable.
    HandResult result = 9;

    message PlayerAction {
        enum Action {
            FOLD = 0;
            CHECK = 1;
            CALL = 2;
            RAISE = 3;
            ALL_IN = 4;
        }
        // The action the player took.
        Action action = 1;

        // The amount added to the pot.
        int64 bet_size = 2;

        // The player taking the action.
        string player_id = 3;
    }
    // The actions taken this hand.
    repeated PlayerAction.Action actions = 10;
}
