syntax = "proto3";

import "hand_state.proto";

package jam;

message GameState {
    message Player {
        // The current stack size, in cents.
        int64 stack_size = 1;  // Take care of number 1.

        //  The id of the player.
        string id = 2;

        // The name of the player, in the game.
        string name = 3;

        // The amount the player bought in for, in cents.
        int64 buy_in_size = 4;

        // The image that the UI should render for the player.
        string image_uri = 5;
    }

    // The amount of money each player has. The order of the players in this
    // array indicates their seating position.
    repeated Player players = 1;  // Most important fields first.

    // The id of the view of the current player.
    string player_view_id = 2;

    // The current hand state.
    HandState current_hand = 3;

    // The blind sizes.
    int64 small_blind_size = 4;
    int64 big_blind_size = 5;

    enum Status {
        PENDING = 0;
        IN_PROGRESS = 1;
        OGRE = 2;
    }

    // The status of the *game*.
    Status status = 6;

    // At the end of the game (status == OGRE), how much players should pay each
    // other so that everyone is evened up.
    message Payout {
        // Who's paying.
        string from_id = 1;

        // Who they're paying it to.
        string to_id = 2;

        // How much they're paying.
        int64 amount = 3;
    }
    repeated Payout payouts = 7;
}

message UpdateError {
    enum Code {
        // Catch-all.
        UNKNOWN = 0;

        // The user is not registered or not allowed to do something.
        UNAUTHORIZED = 1;

        // Some naughty player tried to make an invalid action! They were
        // authenticated, but the move was illegal.
        ILLEGAL_ACTION = 3;
    }
    Code code = 1;
    string message = 2;
}

// Updates to the game state. Either the action worked, or it didn't and there
// is an error set. The server maintains a consistent view of the game state,
// and pushes the game state to each client with web sockets so that no client
// falls too far behind.
message GameUpdate {
    oneof update {
        // The action worked, and here is the new game state.
        GameState newState = 1;

        // The action didn't work, and here is why.
        UpdateError error = 2;
    }

    // The request that was sent, invariant of if it was received or not.
    oneof request {
        // The action the player just tried to do.
        HandState.PlayerAction player_action = 3;

        // A player is ready to move on to the next hand.
        HandState.NextHand next_hand = 4;
    }
}
